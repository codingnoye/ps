{
    "ps 템플릿": {
        "scope": "cpp",
        "prefix": "ps",
        "body": [
            "#include <bits/stdc++.h>",
            "#define fastio cin.tie(0)->sync_with_stdio(0)",
            "#ifdef ONLINE_JUDGE",
            "    #define endl '\\n'",
            "#endif",
            "#define all(x) x.begin(), x.end()",
            "#define sz(x) x.size()",
            "using namespace std;",
            "typedef long long ll;",
            "",
            "int main() {",
            "    fastio;",
            "    ",
            "    $0",
            "}"
        ],
        "description": "ps 기본 템플릿을 생성합니다."
    },
    "ps 심플 템플릿": {
        "scope": "cpp",
        "prefix": "pss",
        "body": [
            "#include <bits/stdc++.h>",
            "#define fastio cin.tie(0)->sync_with_stdio(0)",
            "#define endl '\\n'",
            "using namespace std;",
            "typedef long long ll;",
            "",
            "int main() {",
            "    fastio;",
            "    ",
            "    $0",
            "}"
        ],
        "description": "ps 심플 템플릿을 생성합니다."
    },
    "cpp 기본 템플릿": {
        "scope": "cpp",
        "prefix": "cpp",
        "body": [
            "#include <iostream>",
            "#include <vector>",
            "#include <algorithm>",
            "using namespace std;",
            "#define endl '\\n'",
            "",
            "int main() {",
            "    $0",
            "}"
        ],
        "description": "cpp 기본 템플릿을 생성합니다."
    },
    "좌표압축": {
        "scope": "cpp",
        "prefix": "comp",
        "body": [
            "vector<ll> comp(vector<ll>& v_origin) {",
            "    vector<ll> v(v_origin);",
            "    vector<ll> tmp(v);",
            "    sort(tmp.begin(), tmp.end());",
            "    tmp.erase(unique(tmp.begin(), tmp.end()), tmp.end());",
            "    for (auto &i: v) {",
            "        i = lower_bound(tmp.begin(), tmp.end(), i) - tmp.begin();",
            "    }",
            "    return v;",
            "}"
        ],
        "description": "좌표압축 (justicehui)"
    },
    "Union-find": {
        "scope": "cpp",
        "prefix": "uf",
        "body": [
            "/*",
            "mst: <비용, u, v> 정렬해서 작은것부터 보면서, 라벨 다르면 union",
            "*/",
            "class UF {",
            "public:",
            "    vector<int> parent;",
            "    UF (int n) {",
            "        parent = vector<int>(n);",
            "        for (int i=0; i<n; i++) parent[i] = i;",
            "    }",
            "    int f(int x) {",
            "        int px = parent[x];",
            "        if (px == x) return x;",
            "        return parent[x] = f(px);",
            "    }",
            "    bool u(int x, int y) {",
            "        int px = f(x);",
            "        int py = f(y);",
            "        if (px == py) return false;",
            "        if (px < py) swap(px, py);",
            "        parent[px] = py;",
            "        return true;",
            "    }  ",
            "};"
        ],
        "description": "Union-find"
    },
    "플로이드-와샬": {
        "scope": "cpp",
        "prefix": "floyd",
        "body": [
            "/*",
            "mst: <비용, u, v> 정렬해서 작은것부터 보면서, 라벨 다르면 union",
            "*/",
            "class UF {",
            "public:",
            "    vector<int> parent;",
            "    UF (int n) {",
            "        parent = vector<int>(n);",
            "        for (int i=0; i<n; i++) parent[i] = i;",
            "    }",
            "    int f(int x) {",
            "        int px = parent[x];",
            "        if (px == x) return x;",
            "        return parent[x] = f(px);",
            "    }",
            "    bool u(int x, int y) {",
            "        int px = f(x);",
            "        int py = f(y);",
            "        if (px == py) return false;",
            "        if (px < py) swap(px, py);",
            "        parent[px] = py;",
            "        return true;",
            "    }  ",
            "};"
        ],
        "description": "모든 노드에서 모든 노드로 최단거리, O($N^3$)"
    }
}